#配置数据源,使用阿里 druid 数据库连接池
#mysql数据库
#数据库基本信息配置 
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.mysql.type=com.spz.pet.config.MyDruidDataSource
spring.datasource.mysql.name=mysql-pet
spring.datasource.mysql.driverClassName=com.mysql.jdbc.Driver
spring.datasource.mysql.url=jdbc:mysql://47.92.229.198/platform_shop?allowMultiQueries=true&useUnicode=true&characterEncoding=UTF-8
spring.datasource.mysql.username=KyjRuB9CnzxGf0/NlduKC94oDSzSefdgKudrj0QngyJmLoCg0iZA8IRM+b39uZSimCH7goNsrNl2vS11cd2RqfxsBboCkmGcqwzf/nA/UfdxYBmtS7OYU+DDVM3C6tNKziqv7zTUNY9obD5S6aDsivvmiEn6JC/9aSn/u0SY4wM=
spring.datasource.mysql.password=KyjRuB9CnzxGf0/NlduKC94oDSzSefdgKudrj0QngyJmLoCg0iZA8IRM+b39uZSimCH7goNsrNl2vS11cd2RqfxsBboCkmGcqwzf/nA/UfdxYBmtS7OYU+DDVM3C6tNKziqv7zTUNY9obD5S6aDsivvmiEn6JC/9aSn/u0SY4wM=

#初始化连接数量
spring.datasource.mysql.initialSize = 5
#最大并发连接数,默认值8
spring.datasource.mysql.maxActive = 20
#最小连接池数量,默认值8
spring.datasource.mysql.minIdle = 5
#最大连接池数量,默认值8,不建议使用
#spring.datasource.maxIdle = 20
#配置获取连接等待超时的时间
spring.datasource.mysql.maxWait=30000
#配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.mysql.minEvictableIdleTimeMillis = 30000
#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.mysql.timeBetweenEvictionRunsMillis = 30000

#物理连接初始化的时候执行的sql
spring.datasource.mysql.connectionInitSqls =SELECT 1 FROM DUAL
#用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
spring.datasource.mysql.validationQuery = SELECT 1 FROM DUAL
#建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效,默认false
spring.datasource.mysql.testWhileIdle = false
#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能,默认true
spring.datasource.mysql.testOnBorrow = true
#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能,默认false
spring.datasource.mysql.testOnReturn = false

#要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
#在Druid中，不会存在spring下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100,默认-1
spring.datasource.mysql.maxOpenPreparedStatements = 150
#是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说spring。在mysql下建议关闭,默认false
spring.datasource.mysql.poolPreparedStatements = true
spring.datasource.mysql.maxPoolPreparedStatementPerConnectionSize = 20

#密码加密开启
spring.datasource.mysql.connectionProperties=config.decrypt=true;config.decrypt.key=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCRyaG6aCzNbj7wfr32moeKF2iTFhMZXSEnu52br1EvjA9BWO+qtCmaFI/O07CrlfMRjk22PMJU0LZNJocaUZP6V9W5Dz8IuunI8FFRbg6FocCecy+Ilk3q0QogLwSAL6Z7LuO/nBHMnuCNc+2WDodAsMa8gHsXo01WxeFKiwJl3wIDAQAB
#解密要用的类的类名
spring.datasource.mysql.passwordCallbackClassName=com.spz.pet.config.MyPassWordCallBack

#属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall
spring.datasource.mysql.filters =stat,config

#打开removeAbandoned(回收连接机制) 功能。logAbandoned=true的话，将会在回收事件后，在log中打印出回收Connection的错误信息，
#包括在哪个地方用了Connection却忘记关闭了，在调试的时候很有用
spring.datasource.mysql.removeAbandoned=true
#多久一次单位秒
spring.datasource.mysql.removeAbandonedTimeout=1800
#多久一次单位毫秒
spring.datasource.mysql.removeAbandonedTimeoutMillis=1800000
#如果想用log记录丢弃的连接，可以设置为true。当设置为true时，调用dataSource.getConnection 时会记录一个堆栈追踪，并且被打印出来当连接没有返回的时候
spring.datasource.mysql.logAbandoned=true